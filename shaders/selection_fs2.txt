varying vec4 color;
uniform sampler2D texture;

void main(void)
{
	vec2 size = vec2(640, 480);

	float factor = 1.0;
	float stepX = 1.0 / (size.x * factor);
	float stepY = 1.0 / (size.y * factor);

	vec2 offset[9];
	vec3 kernel[6];

	offset[0] = vec2(-stepX, -stepY); offset[1] = vec2(0.0, -stepY); offset[2] = vec2(stepX, -stepY);
	offset[3] = vec2(-stepX,    0.0); offset[4] = vec2(0.0,    0.0); offset[5] = vec2(stepX,    0.0);
	offset[6] = vec2(-stepX,  stepY); offset[7] = vec2(0.0,  stepY); offset[8] = vec2(stepX,  stepY);


	kernel[0] = vec3(-1.0, 0.0, +1.0);
	kernel[1] = vec3(-2.0, 0.0, +2.0);
	kernel[2] = vec3(-1.0, 0.0, +1.0);

	kernel[3] = vec3(-1.0, -2.0, -1.0);
	kernel[4] = vec3( 0.0,  0.0,  0.0);
	kernel[5] = vec3(+1.0, +2.0, +1.0);

	vec4 texel;

	vec3 sobel[2];
	sobel[0] = vec3(0.0);
	sobel[1] = vec3(0.0);

	for (int j = 0; j < 2; j++)
	{
		for (int i = 0; i < 9; i++)
		{
			texel = texture2D(texture, mod(vec2(1.0) + gl_TexCoord[0].st + offset[i], 1.0));
			sobel[j] += texel.rgb * kernel[3 * j + i / 3][int(mod(float(i), 3.0))];
		}
	}


	vec3 sb = pow(pow(sobel[0], vec3(2.0)) + pow(sobel[1], vec3(2.0)), vec3(0.5));

	gl_FragColor = vec4(0.5, 0.0, 0.0, sb * color.a * 5.0);
}
