#version 150
#extension GL_EXT_shader_image_load_store : enable

uniform layout(size4x32) image2D texture;
uniform layout(size4x32) image2D memory;


vec2 closestPoint(vec2 a, vec2 b, vec2 x)
{
	vec2 c = x - a;
	vec2 v = normalize(b - a);
	float d = length(b - a);
	float t = dot(v, c);

	if (t < 0) return a;
	if (t > d) return b;

	v *= t;

	return a + v;
}

float pointToLineDistance(vec2 a, vec2 b, vec2 x)
{
	return length(x - closestPoint(a, b, x));
}


void main(void)
{
	vec4 loaded = imageLoad(texture, ivec2(0, 0));
	vec4 color0, color1;
	int count = int(loaded.x);

	int counter = 0;


	//find all intersections with the line of the current fragment
	float minL = 0.0, maxL = 0.0;
	for (int j = 0; j < count; j++)
	{
		color0 = imageLoad(texture, ivec2(1 + j, 0));
		color1 = imageLoad(texture, ivec2(1 + (j + 1) % count, 0));

		vec2 p0 = color0.xy;
		vec2 p1 = color1.xy;

		if ((color0.y <= gl_FragCoord.y && color1.y >  gl_FragCoord.y) ||
			(color0.y >  gl_FragCoord.y && color1.y <= gl_FragCoord.y))
		{
			if (p1.x < p0.x)
			{
				vec2 tmp;
				tmp = p0;
				p0 = p1;
				p1 = tmp;
			}

			vec2 edge = p0 - p1;

			float isec =
				min(p0.x, p1.x) +
				abs(p0.x - p1.x) /
				abs(p0.y - p1.y) *
				abs(gl_FragCoord.y - p0.y)
			;

			if (isec < gl_FragCoord.x)
				counter++;
		}

		vec2 edge = p0 - p1;
		float l = length(edge);

		if (j == 0 || minL > l)
			minL = l;
		if (j == 0 || maxL < l)
			maxL = l;
	}



	float minDist = 0.0;
	float minDistLen = 0.0;
	float accumLen = 0.0;
	float accumDist = 0.0;

/*	for (int k = 0; k < count; k++)
	{
		color0 = imageLoad(texture, ivec2(1 + k, 0));
		color1 = imageLoad(texture, ivec2(1 + (k + 1) % count, 0));

		vec2 a = color0.xy;
		vec2 b = color1.xy;
		vec2 x = gl_FragCoord.xy;
		float dist = abs(pointToLineDistance(a, b, x));

		float w = 0.0;

		if (dist > 0)
			w = pow(1.0 / dist, 7.0);

		accumLen += length(vec2(a - b)) * w;
		accumDist += w;

		if (k == 0 || dist < minDist)
		{
			minDist = dist;
			minDistLen = length(a - b);
		}
	}

	accumLen /= accumDist;

	float minDistLenAvg = accumLen; //minDistLen;
	float relativeLen = (minDistLenAvg - minL) / maxL;
	float realShade = min(mix(minDist * 0.5, minDist * 50, 1.0 - pow(relativeLen, 0.1)), 255.0);

	float shade = 0.5 - 0.5 * cos((realShade / 255.0) * 3.141592654);



*/



	minDist = 0.0;
	for (int k = 0; k < count; k++)
	{
		color0 = imageLoad(texture, ivec2(1 + k, 0));
		color1 = imageLoad(texture, ivec2(1 + (k + 1) % count, 0));

		vec2 a = color0.xy;
		vec2 b = color1.xy;
		vec2 x = gl_FragCoord.xy;
		float dist = abs(pointToLineDistance(a, b, x));

		if (k == 0 || dist < minDist)
		{
			minDist = dist;
		}
	}
	minDist = 0.5 - 0.5 * cos(min(minDist / 10.0, 1.0) * 3.141592654);

	color0 = imageLoad(texture, ivec2(1, 0));
	color1 = imageLoad(texture, ivec2(count, 0));

	vec2 a = color0.xy;
	vec2 b = color1.xy;
	vec2 x = gl_FragCoord.xy;
	float dist = abs(pointToLineDistance(a, b, x));

	float shade = 0.0;
	float d = length(a - b) * 0.7;
	if (d > 0.0)
		shade = 0.5 - 0.5 * cos(min(dist / d, 1.0) * 3.141592654);
	else
		shade = 1.0;

	shade *= minDist;




	if (counter % 2 == 0)
		gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
	else
		gl_FragColor = vec4(shade, shade, shade, 1.0);
}
